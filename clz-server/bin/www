#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '4444');
// app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app.callback());


/**
 * Listen on provided port, on all network interfaces.
 */

// 如果前端链接成功,请求404,请添加如下代码
const io = require('socket.io').listen(server);
const user = require('../api/models/admin')
// 将socket和app关联
io.attach(app)
// 和客服端进行连接
io.on('connection', socket=> {
  console.log('socket初始化完成');
  // 监听断开连接
  socket.on('disconnect', data => {
    console.log('后端:连接断开了');
  })
  socket.on('isSocket', data => {
    console.log(data)
  })

  // 定义变量
  const date = new Date()

  // 监听news
  socket.on('news', data => {
    console.log('后端:', data + date)
    let rdata = data + date
    io.emit('rnews', rdata)
  })
  // 监听info
  socket.on('info', data => {
    console.log('info:', data + date)
    let rdata = data + date
    io.emit('rinfo', rdata)
  })
  // socket 按钮点击反馈事件
  socket.on('clickBtn', data => {
    console.log('clickBtn:', data + date)
    let rdata = data + date
    io.emit('rclickBtn', rdata)
  })
  // 获取所有用户信息
  socket.on('userInfo', async (ctx, data) => {
    // 指定不显示写法
    // let sql = await user.find({},{_id: 0,password: 0, meta: 0, loginAttempts: 0},(err, doc)=>{
    //   console.logs(doc)
    // })
    // 指定显示写法
    let sql = await user.find({},{username: 1, role: 1, avatar: 1},(err, doc)=>{
      console.log('/*获取用户信息*/', date, doc)
    })
    io.emit("ruserInfo", sql)
  })

})


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
