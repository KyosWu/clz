#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4444');
// app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

import user from '../api/controller/user'
// 建立socketio
const server = require('http').Server(app.callback())
// 如果前端链接成功,请求404,请添加如下代码
var io = require('socket.io').listen(server);
// 将socket和app关联
io.attach(app)
// 和客服端进行连接
io.on('connection', socket=> {
  console.log('socket初始化完成');
  // 监听断开连接
  socket.on('disconnect', (socket) => {
    console.log('后端:连接断开了');
  })

  socket.on('news', data => {
    console.log('后端:', data)
    io.emit('info', '后端知道了，console一下提醒')
  })

  socket.on('info',data => {
    console.log('info:', data)
  })

  socket.on("message", function(obj) {
    // 调用后端函数，看下能不能封装下
    user.list()
/*    let sql="select FIRST_ from act_id_user";
    let resultStr,resultjson;
    conn.query(sql, function(err, result) {
      if (err) {
        console.log(err);
      }
      if (result) {
        resultjson = JSON.stringify(result);
        resultStr=resultjson;
        io.emit("message", resultjson);
      }*/
    });

    setInterval(function(){
      conn.query(sql, function(err, result) {
        if (err) {
          console.log(err);
        }
        if (result) {
          resultjson = JSON.stringify(result);
          if(resultStr!==resultjson){
            resultStr=resultjson;
            io.emit("message", resultStr);
          }
        }
      })
    },3000)
})


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
